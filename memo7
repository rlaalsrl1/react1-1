-훅이란
1.클래스형 컴포넌트에서는 생성자(constructor)에서 state를 정의하고, setState()함수를 통해
state를 업데이트 합니다.
2.예전에 사용하던 함수형 컴포넌트는 별도로 state를 정의하거나, 컴포넌트의 생명주기에 맞춰서
어떤 코드가 실행되도록 할 수 없었음
3. 함수형 컴포넌트에 이런 기능을 지원하기 위해서 나온것이 바로 훅(Hook)
4. Hook의 이름은 모두 use로 시작

-useEffect
1.useState 와 함께 가장 많이 사용하는 Hook
2. 이 함수는 사이드 이펙트를 수행하기 위한 것
3. 영어로 side effect는 부-작용을 의마함. 일반적으로 프로그랭밍에서
사이트 이펙트는 '개발자가 의도하지 않은 코드가 실행되면서 버그가 발생하는것'을 의미
4.하지만 리액트에서는 '개발자가 의도하지 않은 효과'의 의미에 가까움
*결국 seid effect는 렌더링 외에 실행하야하는 부수적인 코드를 말함
*예를 들어 네트워크 리퀘스트,DOM수동조작, 로깅 등은 정리(clean-up)가 필요 없는 경우

*useEffect() 함수 사용 예
*-첫번째 파라미터는 이펙트 함수가 들어가고, 두번째 파라미터로는 의존성 배열이 들어감
*-의존성 배열은 이펙트가 의존하고 있는 배열로, 배열 안에 있는 변수 중에 하나라도 값이 변경되었을때 
이펙트 함수가 실행.
*-이펙트 함수는 처음 컴포넌트가 렌더링 된 이후, 그리고 재 렌더링 이후에 실행
*-만약 이펙트 함수가 마운트와 언마운트 될때만 한번씩 실행되게 하고 싶으면
빈 배열을 넣으면 됨. 이 경우 props난 state에 있는 어떤 값에도 의존하지 않기 때문에
여러 번 실행 되지 않음.(의존성 배열을 생략하는 겨우는 업데이트 될 때마다 호출)

-useMemo
*useMemo() 훅은 Memoizde value를 리턴하는 훅
*이전 계산값을 갖고 있기 때문에 연산량인 많은 작업의 반복을 피할수 있음
(빠른 렌더링 속도를 얻을 수 있음)
*이 훅은 렌더링이 일어나는 동안 실행 됨
*따라서 렌더링이 일어나는 동안 실행돼서는 안 될 작업을 넣으면 안됨
(예를 들면 useEffect에서 실행되어야 할 사이드 이펙트 같은 것)

*-의존성 배열을 넣지 않을경우, 렌더링이 일어날 때마다 매번 함수가 실행됨
*-따라서 의존성 배열을 넣지 않는것은 의미가 없음
*-의존성 배열에 빈 배열을 넣게되면 컴포넌트 마운트 시에만 함수가 실행됨

-useCallback
*useCallback() 훅은 useMemo()와 유사한 역할
*차이점은 값이 아닌 함수를 반환한다는 점
*의존성 배열을 파라미터로 받는 것은 useMemo와 동일
*파라미터로 받은 함수를 콜백이라고 부름
*useMemo와 마찬가지로 의존성 배열 중 하나라도 변경되면 콜백함수를 반환
